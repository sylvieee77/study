{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sylvieee77/study/blob/main/H_W_1__1_.ipynb%20%20%20%EC%86%90%EC%95%BD%EC%A0%95%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# H.W #1\n",
        "* Due Date : 2023-09-29 / 23:55\n",
        "* eclass에서만 과제 제출 가능 (이메일을 통한 제출은 받지 않음)\n",
        "* 하나의 .ipynb 파일로 제출\n",
        "* 마감 기한 엄수"
      ],
      "metadata": {
        "id": "bFi7xDcuPGno"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  #1"
      ],
      "metadata": {
        "id": "WtlN7LQPQSdl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 한 고등학교 학생의 과목별 기말고사 점수는 다음과 같다."
      ],
      "metadata": {
        "id": "2Da3-77tQW2p"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "과목 | 점수\n",
        ":-- | :--\n",
        "국어 | 90 |\n",
        "영어 | 75\n",
        "수학 | 70\n",
        "물리 | 40\n",
        "지구과학 | 36\n",
        "한국사 | 70"
      ],
      "metadata": {
        "id": "iCnCpqWxQh3m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* if-elif-else문을 이용하여 수학(변수명 : math) 점수 등급을 부여하라.\n",
        "    * 80점 이상이면 \"1등급\" 출력\n",
        "    * 68점 이상 80점 미만이면 \"2등급\" 출력\n",
        "    * 55점 이상 68점 미만이면 \"3등급\" 출력\n",
        "    * 43점 이상 55점 미만이면 \"4등급\" 출력\n",
        "    * 43점 미만이면 \"5등급 이하\" 출력"
      ],
      "metadata": {
        "id": "pxjWy_SRSbUj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "math = 70\n",
        "\n",
        "\n",
        "if math > 80:\n",
        "    print(\"1등급\")\n",
        "elif 68 < math <= 80:\n",
        "    print(\"2등급\")\n",
        "elif 55 < math <= 68:\n",
        "    print(\"3등급\")\n",
        "elif 43 < math <= 55:\n",
        "    print(\"4등급\")\n",
        "else:\n",
        "    print(\"5등급 이하\")\n"
      ],
      "metadata": {
        "id": "QVlIdMiQK629",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26f51627-fc85-47c2-c56d-e3af82b16456"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2등급\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 이 학생의 국영수 평균 점수를 avg() 함수를 생성하여 구하라.\n",
        "    * 매개변수 개수를 지정할 수 없는 경우의 함수 생성\n",
        "    * 평균 점수는 소수점 뒤를 반올림한 값 반환할 것"
      ],
      "metadata": {
        "id": "sgRMXDSyUGLL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def avg(*args):\n",
        "    total = sum(args)\n",
        "    count = len(args)\n",
        "    return round(total / count, 2)"
      ],
      "metadata": {
        "id": "O2InLWjWK8Vz"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "korean = 90\n",
        "english = 75\n",
        "math = 70\n",
        "physics = 40\n",
        "earth_science = 36\n",
        "history = 70\n",
        "\n",
        "average_score = avg(korean, english, math, physics, earth_science, history)\n",
        "print(average_score)"
      ],
      "metadata": {
        "id": "0BI-nnFzK8i2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a325700-0f2e-45b9-a1fb-e441bade5289"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "63.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# #2"
      ],
      "metadata": {
        "id": "zuV14iBiX9u9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* while 문을 사용하여 1부터 100까지의 자연수 중 5의 배수의 합을 구하라.\n",
        "    * 5의 배수는 5로 나누어 떨어지는 수이다\n",
        "    * \"총합은 1050입니다\" 가 출력되도록 할 것"
      ],
      "metadata": {
        "id": "-IUB03kgYBxC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i = 1\n",
        "sum = 0\n",
        "\n",
        "while i <= 100:\n",
        "    if i % 5 == 0:\n",
        "        sum += i\n",
        "    i += 1\n",
        "\n",
        "print(\"총합은\", sum)\n"
      ],
      "metadata": {
        "id": "POU87c0nK9t3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52af8a06-731f-43a5-f76a-7761f357aacf"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "총합은 1050\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* for문과 range함수를 사용하여 1부터 100까지의 합을 구하라"
      ],
      "metadata": {
        "id": "osoWiZa5ZL-6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sum = 0\n",
        "\n",
        "for i in range(1, 101):\n",
        "    sum += i\n",
        "print(\"총합은:\", sum)"
      ],
      "metadata": {
        "id": "gbR4CEXBK-vy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "838cc914-ebac-4cb0-9248-fd54b8b36e9f"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "총합은: 5050\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# #3"
      ],
      "metadata": {
        "id": "QR8_OTeyarKU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 한 통계학과 학생의 주민등록번호는 021120-1068234 이다.\n",
        "* 이 학생의 주민등록번호를 연월일(YYYYMMDD) 부분과 성별을 나타내는 숫자를 출력하라.\n",
        "* 변수명 : pin"
      ],
      "metadata": {
        "id": "eRUfKZ-Oa-u4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pin = \"021120-1068234\"\n",
        "\n",
        "yyyymmdd = pin[:6]\n",
        "\n",
        "gender_digit = pin[7]\n",
        "\n",
        "print(\"연월일(YYYYMMDD) 부분:\", yyyymmdd)\n",
        "print(\"성별을 나타내는 숫자:\", gender_digit)"
      ],
      "metadata": {
        "id": "y5D-1_gcLBRo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a79d0d7-00eb-4d09-92ab-32d8d33dec1c"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "연월일(YYYYMMDD) 부분: 021120\n",
            "성별을 나타내는 숫자: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# #4"
      ],
      "metadata": {
        "id": "2ghNYsdr2vX9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* for와 range 함수를 사용하여 file.txt 파일에 구구단을 저장하라.\n",
        "* 구구단은 2단부터 9단까지 줄바꿈을 이용해 출력될 수 있도록 할 것.\n",
        "* 마지막에는 !cat 함수를 이용하여 내용 출력할 것."
      ],
      "metadata": {
        "id": "Pclftyo32yeg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "with open('file.txt', 'w') as f:\n",
        "\n",
        "    for i in range(2, 10):\n",
        "        f.write(f\"{i}단의 곱셈표:\\n\")\n",
        "\n",
        "        for j in range(1, 10):\n",
        "            f.write(f\"{i} x {j} = {i*j}\\n\")\n",
        "\n",
        "        f.write(\"\\n\")\n",
        "\n",
        "!cat file.txt\n"
      ],
      "metadata": {
        "id": "WQ9ghmkJLCQH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43654ef6-c8c4-4eea-bf51-2dc4af8e7116"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2단의 곱셈표:\n",
            "2 x 1 = 2\n",
            "2 x 2 = 4\n",
            "2 x 3 = 6\n",
            "2 x 4 = 8\n",
            "2 x 5 = 10\n",
            "2 x 6 = 12\n",
            "2 x 7 = 14\n",
            "2 x 8 = 16\n",
            "2 x 9 = 18\n",
            "\n",
            "3단의 곱셈표:\n",
            "3 x 1 = 3\n",
            "3 x 2 = 6\n",
            "3 x 3 = 9\n",
            "3 x 4 = 12\n",
            "3 x 5 = 15\n",
            "3 x 6 = 18\n",
            "3 x 7 = 21\n",
            "3 x 8 = 24\n",
            "3 x 9 = 27\n",
            "\n",
            "4단의 곱셈표:\n",
            "4 x 1 = 4\n",
            "4 x 2 = 8\n",
            "4 x 3 = 12\n",
            "4 x 4 = 16\n",
            "4 x 5 = 20\n",
            "4 x 6 = 24\n",
            "4 x 7 = 28\n",
            "4 x 8 = 32\n",
            "4 x 9 = 36\n",
            "\n",
            "5단의 곱셈표:\n",
            "5 x 1 = 5\n",
            "5 x 2 = 10\n",
            "5 x 3 = 15\n",
            "5 x 4 = 20\n",
            "5 x 5 = 25\n",
            "5 x 6 = 30\n",
            "5 x 7 = 35\n",
            "5 x 8 = 40\n",
            "5 x 9 = 45\n",
            "\n",
            "6단의 곱셈표:\n",
            "6 x 1 = 6\n",
            "6 x 2 = 12\n",
            "6 x 3 = 18\n",
            "6 x 4 = 24\n",
            "6 x 5 = 30\n",
            "6 x 6 = 36\n",
            "6 x 7 = 42\n",
            "6 x 8 = 48\n",
            "6 x 9 = 54\n",
            "\n",
            "7단의 곱셈표:\n",
            "7 x 1 = 7\n",
            "7 x 2 = 14\n",
            "7 x 3 = 21\n",
            "7 x 4 = 28\n",
            "7 x 5 = 35\n",
            "7 x 6 = 42\n",
            "7 x 7 = 49\n",
            "7 x 8 = 56\n",
            "7 x 9 = 63\n",
            "\n",
            "8단의 곱셈표:\n",
            "8 x 1 = 8\n",
            "8 x 2 = 16\n",
            "8 x 3 = 24\n",
            "8 x 4 = 32\n",
            "8 x 5 = 40\n",
            "8 x 6 = 48\n",
            "8 x 7 = 56\n",
            "8 x 8 = 64\n",
            "8 x 9 = 72\n",
            "\n",
            "9단의 곱셈표:\n",
            "9 x 1 = 9\n",
            "9 x 2 = 18\n",
            "9 x 3 = 27\n",
            "9 x 4 = 36\n",
            "9 x 5 = 45\n",
            "9 x 6 = 54\n",
            "9 x 7 = 63\n",
            "9 x 8 = 72\n",
            "9 x 9 = 81\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# #5"
      ],
      "metadata": {
        "id": "DaPjeCqbAPc0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 성공확률이 0.7인 10회의 베르누이 시행에서 성공할 횟수에 대해 랜덤하게 추출된 표본으로 (2,3) 배열 생성하라.\n",
        "* 아래문제들은 이 문제에서 생성한 배열에 한하여 출력하시면 됩니다."
      ],
      "metadata": {
        "id": "fNwQFHDdIhrk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import itertools\n",
        "import random\n",
        "\n",
        "def generate_bernoulli_permutations(success_times, total_times, sample_size):\n",
        "    all_positions = list(range(total_times))\n",
        "    success_combinations = list(itertools.combinations(all_positions, success_times))\n",
        "\n",
        "    sampled_combinations = random.sample(success_combinations, min(sample_size, len(success_combinations)))\n",
        "\n",
        "    permutations = []\n",
        "    for combination in sampled_combinations:\n",
        "        permutation = [0] * total_times\n",
        "        for position in combination:\n",
        "            permutation[position] = 1\n",
        "        permutations.append(permutation)\n",
        "\n",
        "    return permutations\n",
        "\n",
        "total_times = 10\n",
        "sample_size = 3\n",
        "\n",
        "for success_times in [2, 3]:\n",
        "    print(f\"성공적{success_times}정렬됨:\")\n",
        "    permutations = generate_bernoulli_permutations(success_times, total_times, sample_size)\n",
        "    for perm in permutations:\n",
        "        print(\"\".join(map(str, perm)))\n",
        "    print()\n",
        "\n"
      ],
      "metadata": {
        "id": "EcUfc4HHLEvo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "efe75454-5942-4212-f51d-86541b28c633"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "성공적2정렬됨:\n",
            "0110000000\n",
            "0010000010\n",
            "0000001010\n",
            "\n",
            "성공적3정렬됨:\n",
            "0000100011\n",
            "1000100001\n",
            "0100000101\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 0행의 0열값과 1행의 1열값을 출력하라."
      ],
      "metadata": {
        "id": "0wb7xqqQJsKm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import itertools\n",
        "import random\n",
        "\n",
        "def generate_bernoulli_permutations(success_times, total_times, sample_size):\n",
        "    all_positions = list(range(total_times))\n",
        "    success_combinations = list(itertools.combinations(all_positions, success_times))\n",
        "\n",
        "    sampled_combinations = random.sample(success_combinations, min(sample_size, len(success_combinations)))\n",
        "\n",
        "    permutations = []\n",
        "    for combination in sampled_combinations:\n",
        "        permutation = [0] * total_times\n",
        "        for position in combination:\n",
        "            permutation[position] = 1\n",
        "        permutations.append(permutation)\n",
        "\n",
        "    return permutations\n",
        "\n",
        "total_times = 10\n",
        "sample_size = 3\n",
        "\n",
        "all_permutations = {}\n",
        "for success_times in [2, 3]:\n",
        "    permutations = generate_bernoulli_permutations(success_times, total_times, sample_size)\n",
        "    all_permutations[success_times] = permutations\n",
        "\n",
        "for success_times, permutations in all_permutations.items():\n",
        "    if len(permutations) > 0:\n",
        "        print(f\"성공적{success_times}，0번째 행의 0번째 열 값: {permutations[0][0]}\")\n",
        "        if len(permutations) > 1:\n",
        "            print(f\"성공적{success_times}，첫 번째 행의 한 열 값: {permutations[1][1]}\")\n",
        "    print()\n"
      ],
      "metadata": {
        "id": "uckUk06dLFU1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78171aca-7e8d-483e-fe53-950faa045665"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "성공적2，0번째 행의 0번째 열 값: 0\n",
            "성공적2，첫 번째 행의 한 열 값: 0\n",
            "\n",
            "성공적3，0번째 행의 0번째 열 값: 0\n",
            "성공적3，첫 번째 행의 한 열 값: 0\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 모든 행과 열을 거꾸로 출력하라."
      ],
      "metadata": {
        "id": "QudpcxRxKGlP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import itertools\n",
        "import random\n",
        "\n",
        "def generate_bernoulli_permutations(success_times, total_times, sample_size):\n",
        "    all_positions = list(range(total_times))\n",
        "    success_combinations = list(itertools.combinations(all_positions, success_times))\n",
        "\n",
        "    sampled_combinations = random.sample(success_combinations, min(sample_size, len(success_combinations)))\n",
        "\n",
        "    permutations = []\n",
        "    for combination in sampled_combinations:\n",
        "        permutation = [0] * total_times\n",
        "        for position in combination:\n",
        "            permutation[position] = 1\n",
        "        permutations.append(permutation)\n",
        "\n",
        "    return permutations\n",
        "\n",
        "total_times = 10\n",
        "sample_size = 3\n",
        "\n",
        "all_permutations = {}\n",
        "for success_times in [2, 3]:\n",
        "    permutations = generate_bernoulli_permutations(success_times, total_times, sample_size)\n",
        "    all_permutations[success_times] = permutations\n",
        "\n",
        "for success_times, permutations in all_permutations.items():\n",
        "    print(f\"성공{success_times}차수의 역배열:\")\n",
        "    transposed_permutations = list(zip(*permutations))\n",
        "    for row in transposed_permutations:\n",
        "        print(\"\".join(map(str, row)))\n",
        "    print()\n"
      ],
      "metadata": {
        "id": "wJ-JuYidLFpn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "740bda8d-1907-4fd2-b7a7-40fa93ff9715"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "성공2차수의 역배열:\n",
            "000\n",
            "011\n",
            "100\n",
            "000\n",
            "000\n",
            "000\n",
            "000\n",
            "010\n",
            "001\n",
            "100\n",
            "\n",
            "성공3차수의 역배열:\n",
            "010\n",
            "000\n",
            "101\n",
            "010\n",
            "001\n",
            "000\n",
            "100\n",
            "000\n",
            "100\n",
            "011\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 10 이상의 원소들만 출력하라."
      ],
      "metadata": {
        "id": "KVEkgHKXKUeb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import itertools\n",
        "import random\n",
        "\n",
        "def generate_bernoulli_permutations(success_times, total_times, sample_size):\n",
        "    all_positions = list(range(total_times))\n",
        "    success_combinations = list(itertools.combinations(all_positions, success_times))\n",
        "\n",
        "    sampled_combinations = random.sample(success_combinations, min(sample_size, len(success_combinations)))\n",
        "\n",
        "    permutations = []\n",
        "    for combination in sampled_combinations:\n",
        "        permutation = [0] * total_times\n",
        "        for position in combination:\n",
        "            permutation[position] = 1\n",
        "        permutations.append(permutation)\n",
        "\n",
        "    return permutations\n",
        "\n",
        "total_times = 10\n",
        "sample_size = 3\n",
        "\n",
        "all_permutations = {}\n",
        "for success_times in [2, 3]:\n",
        "    permutations = generate_bernoulli_permutations(success_times, total_times, sample_size)\n",
        "    all_permutations[success_times] = permutations\n",
        "\n",
        "for success_times, permutations in all_permutations.items():\n",
        "    print(f\"성공{success_times}차수를 거꾸로 정렬하고 값이 10보다 큰 행만 출력합니다.:\")\n",
        "    transposed_permutations = list(zip(*permutations))\n",
        "\n",
        "    for row in transposed_permutations:\n",
        "        # 이진 배열을 정수로 변환합니다\n",
        "        integer_value = int(\"\".join(map(str, row)), 2)\n",
        "        if integer_value > 10:\n",
        "            print(integer_value)\n",
        "    print()\n"
      ],
      "metadata": {
        "id": "2WuUGpOoLGIZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "62735568-2121-445b-914d-ed138045a22a"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "성공2차수를 거꾸로 정렬하고 값이 10보다 큰 행만 출력합니다.:\n",
            "\n",
            "성공3차수를 거꾸로 정렬하고 값이 10보다 큰 행만 출력합니다.:\n",
            "\n"
          ]
        }
      ]
    }
  ]
}